/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Delance {
  export type RequestStruct = {
    title: string;
    amount: BigNumberish;
    locked: boolean;
    paid: boolean;
  };

  export type RequestStructOutput = [
    title: string,
    amount: bigint,
    locked: boolean,
    paid: boolean
  ] & { title: string; amount: bigint; locked: boolean; paid: boolean };
}

export interface DelanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveRequest"
      | "createRequest"
      | "deadline"
      | "employer"
      | "freelancer"
      | "getAllRequests"
      | "getContractBalance"
      | "price"
      | "requests"
      | "setDeadline"
      | "setFreelancer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeadlineUpdated"
      | "FreelancerUpdated"
      | "FundsReceived"
      | "RequestApproved"
      | "RequestCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRequest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(functionFragment: "employer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "freelancer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreelancer",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "employer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freelancer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreelancer",
    data: BytesLike
  ): Result;
}

export namespace DeadlineUpdatedEvent {
  export type InputTuple = [newDeadline: BigNumberish];
  export type OutputTuple = [newDeadline: bigint];
  export interface OutputObject {
    newDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FreelancerUpdatedEvent {
  export type InputTuple = [newFreelancer: AddressLike];
  export type OutputTuple = [newFreelancer: string];
  export interface OutputObject {
    newFreelancer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReceivedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestApprovedEvent {
  export type InputTuple = [index: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [index: bigint, amount: bigint];
  export interface OutputObject {
    index: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestCreatedEvent {
  export type InputTuple = [
    index: BigNumberish,
    title: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [index: bigint, title: string, amount: bigint];
  export interface OutputObject {
    index: bigint;
    title: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Delance extends BaseContract {
  connect(runner?: ContractRunner | null): Delance;
  waitForDeployment(): Promise<this>;

  interface: DelanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveRequest: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  createRequest: TypedContractMethod<
    [_title: string, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  deadline: TypedContractMethod<[], [bigint], "view">;

  employer: TypedContractMethod<[], [string], "view">;

  freelancer: TypedContractMethod<[], [string], "view">;

  getAllRequests: TypedContractMethod<
    [],
    [Delance.RequestStructOutput[]],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  price: TypedContractMethod<[], [bigint], "view">;

  requests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean] & {
        title: string;
        amount: bigint;
        locked: boolean;
        paid: boolean;
      }
    ],
    "view"
  >;

  setDeadline: TypedContractMethod<
    [_deadline: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFreelancer: TypedContractMethod<
    [_freelancer: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveRequest"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRequest"
  ): TypedContractMethod<
    [_title: string, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "employer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "freelancer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllRequests"
  ): TypedContractMethod<[], [Delance.RequestStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean] & {
        title: string;
        amount: bigint;
        locked: boolean;
        paid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setDeadline"
  ): TypedContractMethod<[_deadline: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFreelancer"
  ): TypedContractMethod<[_freelancer: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DeadlineUpdated"
  ): TypedContractEvent<
    DeadlineUpdatedEvent.InputTuple,
    DeadlineUpdatedEvent.OutputTuple,
    DeadlineUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FreelancerUpdated"
  ): TypedContractEvent<
    FreelancerUpdatedEvent.InputTuple,
    FreelancerUpdatedEvent.OutputTuple,
    FreelancerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReceived"
  ): TypedContractEvent<
    FundsReceivedEvent.InputTuple,
    FundsReceivedEvent.OutputTuple,
    FundsReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RequestApproved"
  ): TypedContractEvent<
    RequestApprovedEvent.InputTuple,
    RequestApprovedEvent.OutputTuple,
    RequestApprovedEvent.OutputObject
  >;
  getEvent(
    key: "RequestCreated"
  ): TypedContractEvent<
    RequestCreatedEvent.InputTuple,
    RequestCreatedEvent.OutputTuple,
    RequestCreatedEvent.OutputObject
  >;

  filters: {
    "DeadlineUpdated(uint256)": TypedContractEvent<
      DeadlineUpdatedEvent.InputTuple,
      DeadlineUpdatedEvent.OutputTuple,
      DeadlineUpdatedEvent.OutputObject
    >;
    DeadlineUpdated: TypedContractEvent<
      DeadlineUpdatedEvent.InputTuple,
      DeadlineUpdatedEvent.OutputTuple,
      DeadlineUpdatedEvent.OutputObject
    >;

    "FreelancerUpdated(address)": TypedContractEvent<
      FreelancerUpdatedEvent.InputTuple,
      FreelancerUpdatedEvent.OutputTuple,
      FreelancerUpdatedEvent.OutputObject
    >;
    FreelancerUpdated: TypedContractEvent<
      FreelancerUpdatedEvent.InputTuple,
      FreelancerUpdatedEvent.OutputTuple,
      FreelancerUpdatedEvent.OutputObject
    >;

    "FundsReceived(address,uint256)": TypedContractEvent<
      FundsReceivedEvent.InputTuple,
      FundsReceivedEvent.OutputTuple,
      FundsReceivedEvent.OutputObject
    >;
    FundsReceived: TypedContractEvent<
      FundsReceivedEvent.InputTuple,
      FundsReceivedEvent.OutputTuple,
      FundsReceivedEvent.OutputObject
    >;

    "RequestApproved(uint256,uint256)": TypedContractEvent<
      RequestApprovedEvent.InputTuple,
      RequestApprovedEvent.OutputTuple,
      RequestApprovedEvent.OutputObject
    >;
    RequestApproved: TypedContractEvent<
      RequestApprovedEvent.InputTuple,
      RequestApprovedEvent.OutputTuple,
      RequestApprovedEvent.OutputObject
    >;

    "RequestCreated(uint256,string,uint256)": TypedContractEvent<
      RequestCreatedEvent.InputTuple,
      RequestCreatedEvent.OutputTuple,
      RequestCreatedEvent.OutputObject
    >;
    RequestCreated: TypedContractEvent<
      RequestCreatedEvent.InputTuple,
      RequestCreatedEvent.OutputTuple,
      RequestCreatedEvent.OutputObject
    >;
  };
}
